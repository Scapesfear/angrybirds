package io.github.angry_birds;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.glutils.ShapeRenderer;
import org.junit.jupiter.api.Test;
import testbirds.testbird;
import testblocks.testblock;
import testpigs.testPigs;
public class junittest2 {
    @Test
    public void test1() {
        CustomWorld world = null;
        ShapeRenderer shapeRenderer = null;
        SpriteBatch batch = null;
        testbird b = new testbird("ui/redbird.png", world, shapeRenderer, batch,null,1.7f,"redbird",15 );
        b.setX(1650);
        b.setY(800);
        assert(b.isinboundary());
        b.setX(650);
        b.setY(1800);
        assert (!b.isinboundary());
        b.setX(1650);
        b.setY(-800);
        assert (b.isinboundary());
        b.setX(-650);
        b.setY(800);
        assert (b.isinboundary());
        testblock bl1 = new testblock(0, 0,"ui/ice.png", world, batch, shapeRenderer,50,1.5f,50,50,0,3);
        bl1.isinboundary();
        assert (bl1.alive);
        bl1.health=0;
        bl1.isinboundary();
        assert (!bl1.alive);
        bl1.health=50;
        bl1.setX(1650);
        bl1.isinboundary();
        assert (!bl1.alive);
        bl1.setX(650);
        bl1.setY(1800);
        bl1.isinboundary();
        assert (bl1.alive);
        bl1.setX(650);
        bl1.setY(-800);
        bl1.isinboundary();
        assert (!bl1.alive);
        bl1.setX(-650);
        bl1.setY(800);
        bl1.isinboundary();
        assert (!bl1.alive);
        testPigs p = new testPigs("ui/king-pig.png", world, shapeRenderer, batch, 0, 0, 0, "kingpig",50);
        p.isinboundary();
        assert (p.alive);
        p.Hp = 0;
        p.isinboundary();
        assert (!p.alive);
        p.Hp = 50;
        p.setX(1650);
        p.isinboundary();
        assert (!p.alive);
        p.setX(650);
        p.setY(1800);
        p.isinboundary();
        assert (p.alive);
        p.setX(650);
        p.setY(-800);
        p.isinboundary();
        assert (!p.alive);
        p.setX(-650);
        p.setY(800);
        p.isinboundary();
        assert (!p.alive);
    }
}
